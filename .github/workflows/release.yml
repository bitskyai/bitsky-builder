name: Build/Release

on:
  release:
    types:
      - published
env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  release_headless_producer:
    name: Push Headless Producer Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.1.0
        with:
          submodules: true
      -
        name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=bitskyai/headless-producer
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Navigate to bitsky-headless-producer folder and List files
        run: cd ./bitsky-headless-producer && ls
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./bitsky-headless-producer
          file: ./bitsky-headless-producer/Dockerfile
          pull: true
          push: true
          tags: |
            bitskyai/headless-producer:latest
            ${{ steps.prep.outputs.tags }}

  release_http_producer:
    name: Push HTTP Producer Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.1.0
        with:
          submodules: true
      -
        name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=bitskyai/http-producer
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Navigate to bitsky-http-producer folder and List files
        run: cd ./bitsky-http-producer && ls
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./bitsky-http-producer
          file: ./bitsky-http-producer/Dockerfile
          pull: true
          push: true
          tags: |
            bitskyai/http-producer:latest
            ${{ steps.prep.outputs.tags }}

  release_hello_retailer:
    name: Push Hello Retailer Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.1.0
        with:
          submodules: true
      -
        name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=bitskyai/hello-retailer
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Navigate to bitsky-hello-retailer folder and List files
        run: cd ./bitsky-hello-retailer && ls
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./bitsky-hello-retailer
          file: ./bitsky-hello-retailer/Dockerfile
          pull: true
          push: true
          tags: |
            bitskyai/hello-retailer:latest
            ${{ steps.prep.outputs.tags }}          

  release_web_app:
    name: Push BitSky Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.1.0
        with:
          submodules: true
      -
        name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=bitskyai/web-app
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Navigate to bitsky-web-app folder and List files
        run: cd ./bitsky-web-app && ls
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./bitsky-web-app
          file: ./bitsky-web-app/Dockerfile
          pull: true
          push: true
          tags: |
            bitskyai/web-app:latest
            ${{ steps.prep.outputs.tags }}
  
  release_desktop_app:
    # only trigger when it is `release/bitspider` branch
    # if: github.ref == 'refs/heads/release/bitspider'
    runs-on: ${{ matrix.os }}

    # Platforms to build on/for
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.1.0
        with:
          submodules: true
      - name: Setup Node.js
        uses: actions/setup-node@v1.4.2
        with:
          node-version: "12.x"
          registry-url: https://registry.npmjs.org/
      - name: Install node_modules
        run: ls && npm install
      - name: Build
        run: npm run build-desktop-app
      - name: List generate files
        run: cd ./bitsky-desktop-app/out && ls
      - name: Get Release
        id: get_release
        uses: bruceadams/get-release@v1.2.0
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./bitsky-desktop-app/out/bitsky.zip
          asset_name: 'bitsky-${{ matrix.os }}.zip'
          asset_content_type: application/zip

  createPR:
    needs: [release_headless_producer, release_http_producer, release_hello_retailer, release_web_app, release_desktop_app]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.1.0
        with:
          submodules: true
      - name: Get release version
        run: |
          VERSION=${GITHUB_REF##*/v}
          echo "::set-env name=VERSION::${GITHUB_REF##*/v}"
      - name: Create Pull Request to `master`
        uses: repo-sync/pull-request@v2
        with:
          source_branch: "release/v${{env.VERSION}}"        # If blank, default: triggered branch
          destination_branch: "master"                      # If blank, default: master
          pr_title: "Merge to master - ${{env.VERSION}}"              # Title of pull request
          pr_body: ":crown: successfully publish ${{env.VERSION}}. Pulling release/v${{env.VERSION}} into master"                                      # Full markdown support, requires pr_title to be set
          pr_reviewer: "neoskx"                         # Comma-separated list (no spaces)
          pr_assignee: "neoskx"                         # Comma-separated list (no spaces)
          pr_label: "release"                               # Comma-separated list (no spaces)
          # pr_draft: true                                    # Creates pull request as draft
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Pull Request to `develop`
        uses: repo-sync/pull-request@v2
        with:
          source_branch: "release/v${{env.VERSION}}"        # If blank, default: triggered branch
          destination_branch: "develop"                      # If blank, default: master
          pr_title: "Merge to develop - ${{env.VERSION}}"              # Title of pull request
          pr_body: ":crown: successfully publish ${{env.VERSION}}. Pulling release/v${{env.VERSION}} into develop"                                      # Full markdown support, requires pr_title to be set
          pr_reviewer: "neoskx"                         # Comma-separated list (no spaces)
          pr_assignee: "neoskx"                         # Comma-separated list (no spaces)
          pr_label: "release"                               # Comma-separated list (no spaces)
          # pr_draft: true                                    # Creates pull request as draft
          github_token: ${{ secrets.GITHUB_TOKEN }}